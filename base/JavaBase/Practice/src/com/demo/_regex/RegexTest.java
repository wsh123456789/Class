package com.demo._regex;

public class RegexTest {
    public static void main(String[] args) {
        /*
        正则表达式
            * 是指一个用来描述或者匹配一系列符合某个语法规则的字符串的单个字符串。其实就是一种规则。有自己特殊的应用。
	    *作用:
            比如注册邮箱, 邮箱有用户名和密码, 一般会对其限制长度, 这个限制长度的事情就是正则表达式做的
        * */
//        字符类(在java.util.regex包中的Pattern类中)
//
//        注：[]代表单个字符
//      [abc]                   a、b 或 c中的一个字符
//      [^abc]                  任何字符，除了 a、b 或 c（否定）
//		[a-zA-Z]                a 到 z 或 A 到 Z，两头的字母包括在内（范围）
//		[a-d[m-p]]              a 到 d 或 m 到 p：[a-dm-p]（并集，或的关系）
//		[a-z&&[def]]            d、e 或 f（交集）    相当于[def]
//      [a-z&&[^bc]]            a 到 z，除了 b 和 c：[ad-z]（减去）
//		[a-z&&[^m-p]]           a 到 z，而非 m 到 p：[a-lq-z]（减去）
//	*   [0-9]                   0到9的字符都包括


       /*
       预定义字符类
            .任何一个字符 一个点代表任意一个字符，两个点代表任意两个字符
            \d 数字：[0 - 9]            \代表转义字符, 如果想表示\d的话, 需要\\d
            \D 非数字： [^0 - 9]
            \s 空白字符：[ \t\n\x0B\f\r] //空格,\t:制表符,\n:换行,\x0B:垂直制表符,\f:翻页,\r:回车
            \S 非空白字符：[^\s]
            \w 单词字符：[a - zA - Z_0 - 9]      //标识符的组成规则 $
            \W 非单词字符：[^\w]
       */

       /*
       Greedy 数量词
	       * X? X，一次或一次也没有  0,1
           * X* X，零次或多次     （其实应该是零次到多次）
	       * X+ X，一次或多次
           * X{n} X，恰好 n 次
           * X{n,} X，至少 n 次
           * X{n,m} X，至少 n 次，但是不超过 m 次
        */
    }
}
