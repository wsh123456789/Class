"""
继承
子类会继承父类所有非私有的属性和行为

父类：基类 超类
子类：派生类

object 祖先  所有类都直接或间接的继承了它

封装
    私有化
    对外提供公共的访问方式
特点
    1、只能在本类中访问
    2、子类无法继承也无法访问
    3、用来处理内部事情，不通过对象处理

私有化的格式：
    __属性名  __方法名


"""

# 故事情节：煎饼果子老师傅在煎饼果子界摸爬滚打几十年，拥有一身精湛的煎饼果子技术，并总结了一套"古法煎饼果子配方"。
# 可是老师傅年迈已久，在嗝屁之前希望把自己的配方传承下去，于是老师傅把配方传给他的徒弟大猫...

# 大猫掌握了师傅的配方，可以制作古法煎饼果子。但是大猫是个爱学习的好孩子，
# 他希望学到更多的煎饼果子的做法，于是通过百度搜索，找到了一家煎饼果子培训学校。（多继承）

# 大猫掌握了 师傅的配方 和 学校的配方，通过研究，大猫在两个配方的基础上，
# 创建了一种全新的煎饼果子配方，称之为 "猫氏煎饼果子配方"。（子类重写父类同名属性和方法）

# 大猫的新配方大受欢迎，但是有些顾客希望也能吃到古法配方和 现代配方 的煎饼果子...（子类调用父类的同名属性和方法）



# 大猫的煎饼果子店非常红火，终于有一天，他成了世界首富！！
# 但是他也老了，所以他希望把 师傅的配方 和 学校的配方 以及自己的配方 继续传承下去...（多层继承）

# 大猫觉得配方传承下去没问题，但是钱是辛辛苦苦挣得血汗钱，不想传给徒弟。（私有权限）



class 学校(object):
    def __init__(self):
        self.配方 = "科技煎饼果子配方"

    def 技术(self):
        print("狠活煎饼果子")

class 老师傅(object):

    def __init__(self):
        self.配方 = "古法煎饼果子配方"

    def 技术(self):
        print("古法煎饼果子")
        # return 1

class 大猫(学校,老师傅):
    def __init__(self):
        self.配方 = "猫氏煎饼果子配方"
        self.__money = 10000

     #设置钱数
    def setMoney(self,money):
        if money <10000:
            print("钱不能越赚越少")
        else:
            self.__money = money

    #获取钱数
    def getMoney(self):
        return self.__money

    def 技术(self):
        print("猫爪煎饼果子")

    def 毛氏(self):
        self.__init__()

    #在类中
    def 古法(self):
        # 老师傅.技术(self)
        super(学校, self).技术()# 第一个参数 是决定从那个类开始往上找
    def 古法配方(self):
        pf =super(学校, self).__init__()



    def 学校技术(self):
        super(大猫, self).技术()
    def 学校配方(self):
        pf = super(大猫, self).__init__()


class 小狗(大猫):
    pass


dog = 小狗()
dog.古法配方()
print(dog.配方)
dog.古法()
print()



cat1 = 大猫()
cat1.setMoney(10001)
print(cat1.getMoney())


# print(cat1.配方)
# cat1.技术()
# print(大猫.__mro__) #继承体系
#
# # 1、在类外
# # 老师傅.技术(cat1)
# cat1.古法()
# cat1.古法配方()
# cat1.毛氏()
# print(cat1.配方)
# cat1.学校配方()
# print(cat1.配方)
# cat1.学校技术()